from aiogram import types, Dispatcher, Bot
from aiogram.filters import Command
from database.crud import get_unique_logs_last_24h
import config


async def logs_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—É –º–æ–≥–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
    admin_ids = [6444536776, 1727679734]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ ID –∏–ª–∏ –≤—ã–Ω–µ—Å–∏ –≤ config
    if message.from_user.id not in admin_ids:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    logs = get_unique_logs_last_24h()
    if not logs:
        await message.answer("‚ùå –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    count = len(logs)
    response = f"üìä <b>–õ–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n–í—Å–µ–≥–æ: <b>{count}</b>\n\n"

    for log in logs:
        response += (
            f"üÜî <b>#{log['booking_id']}</b> || #{log['client_id']}\n"
            f"üí≥ {log['masked_pan']}\n"
            f"üïí {log['created_at']}\n\n"
        )

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
    if len(response) > 4000:
        await message.answer_document(("logs.txt", response.encode("utf-8")))
    else:
        await message.answer(response, parse_mode="HTML")


async def register_handlers(dp: Dispatcher, bot: Bot):
    dp.message.register(logs_command, Command("logs"))
